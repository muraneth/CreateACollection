import nacl from 'tweetnacl';
import type { ExportedKeypair, Keypair } from './keypair';
import { SignatureScheme } from './publickey';
import { Ed25519PublicKey } from './ed25519_publickey';
export declare const DEFAULT_ED25519_DERIVATION_PATH = "m/44'/784'/0'/0'/0'";
/**
 * Ed25519 Keypair data
 */
export interface Ed25519KeypairData {
    publicKey: Uint8Array;
    secretKey: Uint8Array;
}
export declare class Ed25519Keypair implements Keypair {
    keypair: Ed25519KeypairData | nacl.SignKeyPair;
    /**
     * Create a new Ed25519 keypair instance.
     * Generate random keypair if no {@link Ed25519Keypair} is provided.
     *
     * @param keypair Ed25519 keypair
     */
    constructor(keypair: Ed25519KeypairData);
    /**
     * Generate a new Ed25519 keypair instance.
     *
     */
    static generate(): Ed25519Keypair;
    static fromSecretKey(secretKey: Uint8Array): Ed25519Keypair;
    /**
     * Get the key scheme of the keypair ED25519
     */
    getKeyScheme(): SignatureScheme;
    /**
     * Generate an Ed25519 keypair from a 32 byte seed.
     *
     * @param seed seed byte array
     */
    static fromSeed(seed: Uint8Array): Ed25519Keypair;
    /**
     * Return the signature for the provided data using Ed25519.
     */
    signData(data: Uint8Array): Uint8Array;
    static deriveKeypair(mnemonics: string, path?: string): Ed25519Keypair;
    getPublicKey(): Ed25519PublicKey;
    export(): ExportedKeypair;
}
