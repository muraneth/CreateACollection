import { StorageNodeClient } from '../proto/db3_node.client';
import { PayloadType } from '../proto/db3_mutation';
import { QuerySessionInfo } from '../proto/db3_session';
import { StructuredQuery } from '../proto/db3_database';
import { TxId } from '../crypto/id';
import { Wallet } from '../wallet/wallet';
export declare class StorageProvider {
    readonly client: StorageNodeClient;
    readonly wallet: Wallet;
    readonly useTypedFormat: boolean;
    /**
     * new a storage provider with db3 storage grpc url
     */
    constructor(url: string, wallet: Wallet);
    /**
     * send mutation to db3 network
     */
    sendMutation(mutation: Uint8Array, payloadType: PayloadType): Promise<TxId>;
    private wrapProtoWriteRequest;
    private wrapTypedWriteRequest;
    /**
     * build a session with storage node for querying data
     */
    openSession(): Promise<import("../proto/db3_node").OpenSessionResponse>;
    private wrapProtoSession;
    private wrapTypedSession;
    private wrapProtoCloseSession;
    private wrapTypedCloseSession;
    /**
     * close the session from storage node
     *
     */
    closeSession(token: string, sessionInfo: QuerySessionInfo): Promise<import("../proto/db3_node").CloseSessionResponse>;
    /**
     * get the account information with db3 address
     *
     */
    getAccount(addr: Uint8Array): Promise<import("../proto/db3_node").GetAccountResponse>;
    getState(): Promise<import("../proto/db3_node").NetworkStatus>;
    getDatabase(address: string, token: string): Promise<import("../proto/db3_node").ShowDatabaseResponse>;
    getNonce(): number;
    runQuery(token: string, addr: string, query: StructuredQuery): Promise<import("../proto/db3_node").RunQueryResponse>;
    getDocument(token: string, id: string): Promise<any>;
}
