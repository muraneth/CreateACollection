import { MessageType } from "@protobuf-ts/runtime";
/**
 * the node will dispatch a block event when a new block has been proposed
 *
 * @generated from protobuf message db3_event_proto.BlockEvent
 */
export interface BlockEvent {
    /**
     * @generated from protobuf field: uint64 height = 1;
     */
    height: string;
    /**
     * @generated from protobuf field: bytes block_hash = 2;
     */
    blockHash: Uint8Array;
    /**
     * @generated from protobuf field: bytes app_hash = 3;
     */
    appHash: Uint8Array;
    /**
     * @generated from protobuf field: string chain_id = 4;
     */
    chainId: string;
    /**
     * @generated from protobuf field: uint64 gas = 5;
     */
    gas: string;
}
/**
 * the node will dispatch a mutation event when a mutation has been checked
 *
 * @generated from protobuf message db3_event_proto.MutationEvent
 */
export interface MutationEvent {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: db3_event_proto.MutationEvent.MutationEventStatus status = 2;
     */
    status: MutationEvent_MutationEventStatus;
    /**
     * the address that mutation has been send to
     *
     * @generated from protobuf field: bytes to = 3;
     */
    to: Uint8Array;
    /**
     * @generated from protobuf field: uint64 gas = 4;
     */
    gas: string;
}
/**
 * @generated from protobuf enum db3_event_proto.MutationEvent.MutationEventStatus
 */
export declare enum MutationEvent_MutationEventStatus {
    /**
     * the mutation has been deliveried
     *
     * @generated from protobuf enum value: Deliveried = 0;
     */
    Deliveried = 0,
    /**
     * not enough gas
     *
     * @generated from protobuf enum value: OutOfGas = 1;
     */
    OutOfGas = 1,
    /**
     * invalid mutation
     *
     * @generated from protobuf enum value: Invalid = 2;
     */
    Invalid = 2
}
/**
 * @generated from protobuf enum db3_event_proto.MutationEvent.ToAddressType
 */
export declare enum MutationEvent_ToAddressType {
    /**
     * mutation for data
     *
     * @generated from protobuf enum value: Database = 0;
     */
    Database = 0,
    /**
     * mutation for credit
     *
     * @generated from protobuf enum value: Account = 1;
     */
    Account = 1
}
/**
 * @generated from protobuf message db3_event_proto.EventMessage
 */
export interface EventMessage {
    /**
     * @generated from protobuf field: db3_event_proto.EventType type = 1;
     */
    type: EventType;
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "mutationEvent";
        /**
         * @generated from protobuf field: db3_event_proto.MutationEvent mutation_event = 2;
         */
        mutationEvent: MutationEvent;
    } | {
        oneofKind: "blockEvent";
        /**
         * @generated from protobuf field: db3_event_proto.BlockEvent block_event = 3;
         */
        blockEvent: BlockEvent;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message db3_event_proto.MutationEventFilter
 */
export interface MutationEventFilter {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
}
/**
 * @generated from protobuf message db3_event_proto.BlockEventFilter
 */
export interface BlockEventFilter {
}
/**
 * @generated from protobuf message db3_event_proto.EventFilter
 */
export interface EventFilter {
    /**
     * @generated from protobuf oneof: filter
     */
    filter: {
        oneofKind: "mfilter";
        /**
         * @generated from protobuf field: db3_event_proto.MutationEventFilter mfilter = 1;
         */
        mfilter: MutationEventFilter;
    } | {
        oneofKind: "bfilter";
        /**
         * @generated from protobuf field: db3_event_proto.BlockEventFilter bfilter = 2;
         */
        bfilter: BlockEventFilter;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message db3_event_proto.Subscribution
 */
export interface Subscribution {
    /**
     * @generated from protobuf field: repeated db3_event_proto.EventType topics = 1;
     */
    topics: EventType[];
    /**
     * @generated from protobuf field: repeated db3_event_proto.EventFilter filters = 2;
     */
    filters: EventFilter[];
}
/**
 * @generated from protobuf enum db3_event_proto.EventType
 */
export declare enum EventType {
    /**
     * @generated from protobuf enum value: Block = 0;
     */
    Block = 0,
    /**
     * @generated from protobuf enum value: Mutation = 1;
     */
    Mutation = 1,
    /**
     * @generated from protobuf enum value: Query = 2;
     */
    Query = 2
}
declare class BlockEvent$Type extends MessageType<BlockEvent> {
    constructor();
}
/**
 * @generated MessageType for protobuf message db3_event_proto.BlockEvent
 */
export declare const BlockEvent: BlockEvent$Type;
declare class MutationEvent$Type extends MessageType<MutationEvent> {
    constructor();
}
/**
 * @generated MessageType for protobuf message db3_event_proto.MutationEvent
 */
export declare const MutationEvent: MutationEvent$Type;
declare class EventMessage$Type extends MessageType<EventMessage> {
    constructor();
}
/**
 * @generated MessageType for protobuf message db3_event_proto.EventMessage
 */
export declare const EventMessage: EventMessage$Type;
declare class MutationEventFilter$Type extends MessageType<MutationEventFilter> {
    constructor();
}
/**
 * @generated MessageType for protobuf message db3_event_proto.MutationEventFilter
 */
export declare const MutationEventFilter: MutationEventFilter$Type;
declare class BlockEventFilter$Type extends MessageType<BlockEventFilter> {
    constructor();
}
/**
 * @generated MessageType for protobuf message db3_event_proto.BlockEventFilter
 */
export declare const BlockEventFilter: BlockEventFilter$Type;
declare class EventFilter$Type extends MessageType<EventFilter> {
    constructor();
}
/**
 * @generated MessageType for protobuf message db3_event_proto.EventFilter
 */
export declare const EventFilter: EventFilter$Type;
declare class Subscribution$Type extends MessageType<Subscribution> {
    constructor();
}
/**
 * @generated MessageType for protobuf message db3_event_proto.Subscribution
 */
export declare const Subscribution: Subscribution$Type;
export {};
