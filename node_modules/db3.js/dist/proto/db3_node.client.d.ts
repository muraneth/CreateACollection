import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { EventMessage } from "./db3_event";
import type { SubscribeRequest } from "./db3_node";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { NetworkStatus } from "./db3_node";
import type { ShowNetworkStatusRequest } from "./db3_node";
import type { GetDocumentResponse } from "./db3_node";
import type { GetDocumentRequest } from "./db3_node";
import type { RunQueryResponse } from "./db3_node";
import type { RunQueryRequest } from "./db3_node";
import type { ShowDatabaseResponse } from "./db3_node";
import type { ShowDatabaseRequest } from "./db3_node";
import type { BroadcastResponse } from "./db3_node";
import type { BroadcastRequest } from "./db3_node";
import type { GetSessionInfoResponse } from "./db3_node";
import type { GetSessionInfoRequest } from "./db3_node";
import type { GetAccountResponse } from "./db3_node";
import type { GetAccountRequest } from "./db3_node";
import type { CloseSessionResponse } from "./db3_node";
import type { CloseSessionRequest } from "./db3_node";
import type { OpenSessionResponse } from "./db3_node";
import type { OpenSessionRequest } from "./db3_node";
import type { QueryBillResponse } from "./db3_node";
import type { QueryBillRequest } from "./db3_node";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service db3_node_proto.StorageNode
 */
export interface IStorageNodeClient {
    /**
     * method for querying bills by height
     *
     * @generated from protobuf rpc: QueryBill(db3_node_proto.QueryBillRequest) returns (db3_node_proto.QueryBillResponse);
     */
    queryBill(input: QueryBillRequest, options?: RpcOptions): UnaryCall<QueryBillRequest, QueryBillResponse>;
    /**
     * method for open query session
     *
     * @generated from protobuf rpc: OpenQuerySession(db3_node_proto.OpenSessionRequest) returns (db3_node_proto.OpenSessionResponse);
     */
    openQuerySession(input: OpenSessionRequest, options?: RpcOptions): UnaryCall<OpenSessionRequest, OpenSessionResponse>;
    /**
     * method for close query session
     *
     * @generated from protobuf rpc: CloseQuerySession(db3_node_proto.CloseSessionRequest) returns (db3_node_proto.CloseSessionResponse);
     */
    closeQuerySession(input: CloseSessionRequest, options?: RpcOptions): UnaryCall<CloseSessionRequest, CloseSessionResponse>;
    /**
     * method for querying account
     *
     * @generated from protobuf rpc: GetAccount(db3_node_proto.GetAccountRequest) returns (db3_node_proto.GetAccountResponse);
     */
    getAccount(input: GetAccountRequest, options?: RpcOptions): UnaryCall<GetAccountRequest, GetAccountResponse>;
    /**
     * @generated from protobuf rpc: GetSessionInfo(db3_node_proto.GetSessionInfoRequest) returns (db3_node_proto.GetSessionInfoResponse);
     */
    getSessionInfo(input: GetSessionInfoRequest, options?: RpcOptions): UnaryCall<GetSessionInfoRequest, GetSessionInfoResponse>;
    /**
     * method for broadcast request
     *
     * @generated from protobuf rpc: Broadcast(db3_node_proto.BroadcastRequest) returns (db3_node_proto.BroadcastResponse);
     */
    broadcast(input: BroadcastRequest, options?: RpcOptions): UnaryCall<BroadcastRequest, BroadcastResponse>;
    /**
     * method for show database
     *
     * @generated from protobuf rpc: ShowDatabase(db3_node_proto.ShowDatabaseRequest) returns (db3_node_proto.ShowDatabaseResponse);
     */
    showDatabase(input: ShowDatabaseRequest, options?: RpcOptions): UnaryCall<ShowDatabaseRequest, ShowDatabaseResponse>;
    /**
     * method for query document
     *
     * @generated from protobuf rpc: RunQuery(db3_node_proto.RunQueryRequest) returns (db3_node_proto.RunQueryResponse);
     */
    runQuery(input: RunQueryRequest, options?: RpcOptions): UnaryCall<RunQueryRequest, RunQueryResponse>;
    /**
     * method for get document
     *
     * @generated from protobuf rpc: GetDocument(db3_node_proto.GetDocumentRequest) returns (db3_node_proto.GetDocumentResponse);
     */
    getDocument(input: GetDocumentRequest, options?: RpcOptions): UnaryCall<GetDocumentRequest, GetDocumentResponse>;
    /**
     * method for show the network status
     *
     * @generated from protobuf rpc: ShowNetworkStatus(db3_node_proto.ShowNetworkStatusRequest) returns (db3_node_proto.NetworkStatus);
     */
    showNetworkStatus(input: ShowNetworkStatusRequest, options?: RpcOptions): UnaryCall<ShowNetworkStatusRequest, NetworkStatus>;
    /**
     * method for subscribution
     *
     * @generated from protobuf rpc: Subscribe(db3_node_proto.SubscribeRequest) returns (stream db3_event_proto.EventMessage);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, EventMessage>;
}
/**
 * @generated from protobuf service db3_node_proto.StorageNode
 */
export declare class StorageNodeClient implements IStorageNodeClient, ServiceInfo {
    private readonly _transport;
    typeName: string;
    methods: import("@protobuf-ts/runtime-rpc").MethodInfo<any, any>[];
    options: {
        [extensionName: string]: import("@protobuf-ts/runtime").JsonValue;
    };
    constructor(_transport: RpcTransport);
    /**
     * method for querying bills by height
     *
     * @generated from protobuf rpc: QueryBill(db3_node_proto.QueryBillRequest) returns (db3_node_proto.QueryBillResponse);
     */
    queryBill(input: QueryBillRequest, options?: RpcOptions): UnaryCall<QueryBillRequest, QueryBillResponse>;
    /**
     * method for open query session
     *
     * @generated from protobuf rpc: OpenQuerySession(db3_node_proto.OpenSessionRequest) returns (db3_node_proto.OpenSessionResponse);
     */
    openQuerySession(input: OpenSessionRequest, options?: RpcOptions): UnaryCall<OpenSessionRequest, OpenSessionResponse>;
    /**
     * method for close query session
     *
     * @generated from protobuf rpc: CloseQuerySession(db3_node_proto.CloseSessionRequest) returns (db3_node_proto.CloseSessionResponse);
     */
    closeQuerySession(input: CloseSessionRequest, options?: RpcOptions): UnaryCall<CloseSessionRequest, CloseSessionResponse>;
    /**
     * method for querying account
     *
     * @generated from protobuf rpc: GetAccount(db3_node_proto.GetAccountRequest) returns (db3_node_proto.GetAccountResponse);
     */
    getAccount(input: GetAccountRequest, options?: RpcOptions): UnaryCall<GetAccountRequest, GetAccountResponse>;
    /**
     * @generated from protobuf rpc: GetSessionInfo(db3_node_proto.GetSessionInfoRequest) returns (db3_node_proto.GetSessionInfoResponse);
     */
    getSessionInfo(input: GetSessionInfoRequest, options?: RpcOptions): UnaryCall<GetSessionInfoRequest, GetSessionInfoResponse>;
    /**
     * method for broadcast request
     *
     * @generated from protobuf rpc: Broadcast(db3_node_proto.BroadcastRequest) returns (db3_node_proto.BroadcastResponse);
     */
    broadcast(input: BroadcastRequest, options?: RpcOptions): UnaryCall<BroadcastRequest, BroadcastResponse>;
    /**
     * method for show database
     *
     * @generated from protobuf rpc: ShowDatabase(db3_node_proto.ShowDatabaseRequest) returns (db3_node_proto.ShowDatabaseResponse);
     */
    showDatabase(input: ShowDatabaseRequest, options?: RpcOptions): UnaryCall<ShowDatabaseRequest, ShowDatabaseResponse>;
    /**
     * method for query document
     *
     * @generated from protobuf rpc: RunQuery(db3_node_proto.RunQueryRequest) returns (db3_node_proto.RunQueryResponse);
     */
    runQuery(input: RunQueryRequest, options?: RpcOptions): UnaryCall<RunQueryRequest, RunQueryResponse>;
    /**
     * method for get document
     *
     * @generated from protobuf rpc: GetDocument(db3_node_proto.GetDocumentRequest) returns (db3_node_proto.GetDocumentResponse);
     */
    getDocument(input: GetDocumentRequest, options?: RpcOptions): UnaryCall<GetDocumentRequest, GetDocumentResponse>;
    /**
     * method for show the network status
     *
     * @generated from protobuf rpc: ShowNetworkStatus(db3_node_proto.ShowNetworkStatusRequest) returns (db3_node_proto.NetworkStatus);
     */
    showNetworkStatus(input: ShowNetworkStatusRequest, options?: RpcOptions): UnaryCall<ShowNetworkStatusRequest, NetworkStatus>;
    /**
     * method for subscribution
     *
     * @generated from protobuf rpc: Subscribe(db3_node_proto.SubscribeRequest) returns (stream db3_event_proto.EventMessage);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, EventMessage>;
}
