// @generated by protobuf-ts 2.8.2 with parameter optimize_code_size,long_type_string
// @generated from protobuf file "db3_faucet.proto" (package "db3_faucet_proto", syntax proto3)
// tslint:disable
//
//
// db3_faucet.proto
// Copyright (C) 2023 db3.network Author imotai <codego.me@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message db3_faucet_proto.FaucetRecord
 */
export interface FaucetRecord {
    /**
     * @generated from protobuf field: bytes addr = 1;
     */
    addr: Uint8Array;
    /**
     * @generated from protobuf field: uint32 ts = 2;
     */
    ts: number;
    /**
     * @generated from protobuf field: uint64 amount = 3;
     */
    amount: string;
}
/**
 * @generated from protobuf message db3_faucet_proto.FaucetRequest
 */
export interface FaucetRequest {
    /**
     * @generated from protobuf field: bytes hash = 1;
     */
    hash: Uint8Array;
    /**
     * @generated from protobuf field: bytes signature = 2;
     */
    signature: Uint8Array;
}
/**
 * @generated from protobuf message db3_faucet_proto.FaucetResponse
 */
export interface FaucetResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string msg = 2;
     */
    msg: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class FaucetRecord$Type extends MessageType<FaucetRecord> {
    constructor() {
        super("db3_faucet_proto.FaucetRecord", [
            { no: 1, name: "addr", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "ts", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "amount", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_faucet_proto.FaucetRecord
 */
export const FaucetRecord = new FaucetRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FaucetRequest$Type extends MessageType<FaucetRequest> {
    constructor() {
        super("db3_faucet_proto.FaucetRequest", [
            { no: 1, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_faucet_proto.FaucetRequest
 */
export const FaucetRequest = new FaucetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FaucetResponse$Type extends MessageType<FaucetResponse> {
    constructor() {
        super("db3_faucet_proto.FaucetResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_faucet_proto.FaucetResponse
 */
export const FaucetResponse = new FaucetResponse$Type();
/**
 * @generated ServiceType for protobuf service db3_faucet_proto.FaucetNode
 */
export const FaucetNode = new ServiceType("db3_faucet_proto.FaucetNode", [
    { name: "Faucet", options: {}, I: FaucetRequest, O: FaucetResponse }
]);
