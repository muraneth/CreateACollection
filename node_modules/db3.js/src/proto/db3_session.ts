// @generated by protobuf-ts 2.8.2 with parameter optimize_code_size,long_type_string
// @generated from protobuf file "db3_session.proto" (package "db3_session_proto", syntax proto3)
// tslint:disable
//
//
//
// db3_mutation.proto
// Copyright (C) 2022 db3.network Author imotai <codego.me@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import { MessageType } from "@protobuf-ts/runtime";
import { PayloadType } from "./db3_mutation";
import { BroadcastMeta } from "./db3_base";
/**
 * @generated from protobuf message db3_session_proto.QuerySessionInfo
 */
export interface QuerySessionInfo {
    /**
     * the hex encoded string
     *
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int64 start_time = 2;
     */
    startTime: string;
    /**
     * @generated from protobuf field: int32 query_count = 3;
     */
    queryCount: number;
    /**
     * the meta for client
     *
     * @generated from protobuf field: db3_base_proto.BroadcastMeta meta = 4;
     */
    meta?: BroadcastMeta;
}
/**
 * @generated from protobuf message db3_session_proto.OpenSessionPayload
 */
export interface OpenSessionPayload {
    /**
     * @generated from protobuf field: string header = 1;
     */
    header: string;
    /**
     * @generated from protobuf field: int64 start_time = 2;
     */
    startTime: string;
}
/**
 * the session for mutation
 *
 * @generated from protobuf message db3_session_proto.QuerySession
 */
export interface QuerySession {
    /**
     * the meta for node client
     *
     * @generated from protobuf field: db3_base_proto.BroadcastMeta meta = 1;
     */
    meta?: BroadcastMeta;
    /**
     * the agreed session info
     *
     * @generated from protobuf field: bytes payload = 2;
     */
    payload: Uint8Array;
    /**
     * client signature
     *
     * @generated from protobuf field: bytes client_signature = 3;
     */
    clientSignature: Uint8Array;
    /**
     * the type of payload
     *
     * @generated from protobuf field: db3_mutation_proto.PayloadType payload_type = 4;
     */
    payloadType: PayloadType;
}
// @generated message type with reflection information, may provide speed optimized methods
class QuerySessionInfo$Type extends MessageType<QuerySessionInfo> {
    constructor() {
        super("db3_session_proto.QuerySessionInfo", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "query_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "meta", kind: "message", T: () => BroadcastMeta }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_session_proto.QuerySessionInfo
 */
export const QuerySessionInfo = new QuerySessionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenSessionPayload$Type extends MessageType<OpenSessionPayload> {
    constructor() {
        super("db3_session_proto.OpenSessionPayload", [
            { no: 1, name: "header", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_session_proto.OpenSessionPayload
 */
export const OpenSessionPayload = new OpenSessionPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySession$Type extends MessageType<QuerySession> {
    constructor() {
        super("db3_session_proto.QuerySession", [
            { no: 1, name: "meta", kind: "message", T: () => BroadcastMeta },
            { no: 2, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "client_signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "payload_type", kind: "enum", T: () => ["db3_mutation_proto.PayloadType", PayloadType] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_session_proto.QuerySession
 */
export const QuerySession = new QuerySession$Type();
