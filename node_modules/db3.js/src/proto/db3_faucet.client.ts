// @generated by protobuf-ts 2.8.2 with parameter optimize_code_size,long_type_string
// @generated from protobuf file "db3_faucet.proto" (package "db3_faucet_proto", syntax proto3)
// tslint:disable
//
//
// db3_faucet.proto
// Copyright (C) 2023 db3.network Author imotai <codego.me@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FaucetNode } from "./db3_faucet";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FaucetResponse } from "./db3_faucet";
import type { FaucetRequest } from "./db3_faucet";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service db3_faucet_proto.FaucetNode
 */
export interface IFaucetNodeClient {
    /**
     * @generated from protobuf rpc: Faucet(db3_faucet_proto.FaucetRequest) returns (db3_faucet_proto.FaucetResponse);
     */
    faucet(input: FaucetRequest, options?: RpcOptions): UnaryCall<FaucetRequest, FaucetResponse>;
}
/**
 * @generated from protobuf service db3_faucet_proto.FaucetNode
 */
export class FaucetNodeClient implements IFaucetNodeClient, ServiceInfo {
    typeName = FaucetNode.typeName;
    methods = FaucetNode.methods;
    options = FaucetNode.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Faucet(db3_faucet_proto.FaucetRequest) returns (db3_faucet_proto.FaucetResponse);
     */
    faucet(input: FaucetRequest, options?: RpcOptions): UnaryCall<FaucetRequest, FaucetResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<FaucetRequest, FaucetResponse>("unary", this._transport, method, opt, input);
    }
}
