// @generated by protobuf-ts 2.8.2 with parameter optimize_code_size,long_type_string
// @generated from protobuf file "db3_node.proto" (package "db3_node_proto", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StorageNode } from "./db3_node";
import type { EventMessage } from "./db3_event";
import type { SubscribeRequest } from "./db3_node";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { NetworkStatus } from "./db3_node";
import type { ShowNetworkStatusRequest } from "./db3_node";
import type { GetDocumentResponse } from "./db3_node";
import type { GetDocumentRequest } from "./db3_node";
import type { RunQueryResponse } from "./db3_node";
import type { RunQueryRequest } from "./db3_node";
import type { ShowDatabaseResponse } from "./db3_node";
import type { ShowDatabaseRequest } from "./db3_node";
import type { BroadcastResponse } from "./db3_node";
import type { BroadcastRequest } from "./db3_node";
import type { GetSessionInfoResponse } from "./db3_node";
import type { GetSessionInfoRequest } from "./db3_node";
import type { GetAccountResponse } from "./db3_node";
import type { GetAccountRequest } from "./db3_node";
import type { CloseSessionResponse } from "./db3_node";
import type { CloseSessionRequest } from "./db3_node";
import type { OpenSessionResponse } from "./db3_node";
import type { OpenSessionRequest } from "./db3_node";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryBillResponse } from "./db3_node";
import type { QueryBillRequest } from "./db3_node";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service db3_node_proto.StorageNode
 */
export interface IStorageNodeClient {
    /**
     * method for querying bills by height
     *
     * @generated from protobuf rpc: QueryBill(db3_node_proto.QueryBillRequest) returns (db3_node_proto.QueryBillResponse);
     */
    queryBill(input: QueryBillRequest, options?: RpcOptions): UnaryCall<QueryBillRequest, QueryBillResponse>;
    /**
     * method for open query session
     *
     * @generated from protobuf rpc: OpenQuerySession(db3_node_proto.OpenSessionRequest) returns (db3_node_proto.OpenSessionResponse);
     */
    openQuerySession(input: OpenSessionRequest, options?: RpcOptions): UnaryCall<OpenSessionRequest, OpenSessionResponse>;
    /**
     * method for close query session
     *
     * @generated from protobuf rpc: CloseQuerySession(db3_node_proto.CloseSessionRequest) returns (db3_node_proto.CloseSessionResponse);
     */
    closeQuerySession(input: CloseSessionRequest, options?: RpcOptions): UnaryCall<CloseSessionRequest, CloseSessionResponse>;
    /**
     * method for querying account
     *
     * @generated from protobuf rpc: GetAccount(db3_node_proto.GetAccountRequest) returns (db3_node_proto.GetAccountResponse);
     */
    getAccount(input: GetAccountRequest, options?: RpcOptions): UnaryCall<GetAccountRequest, GetAccountResponse>;
    /**
     * @generated from protobuf rpc: GetSessionInfo(db3_node_proto.GetSessionInfoRequest) returns (db3_node_proto.GetSessionInfoResponse);
     */
    getSessionInfo(input: GetSessionInfoRequest, options?: RpcOptions): UnaryCall<GetSessionInfoRequest, GetSessionInfoResponse>;
    /**
     * method for broadcast request
     *
     * @generated from protobuf rpc: Broadcast(db3_node_proto.BroadcastRequest) returns (db3_node_proto.BroadcastResponse);
     */
    broadcast(input: BroadcastRequest, options?: RpcOptions): UnaryCall<BroadcastRequest, BroadcastResponse>;
    /**
     * method for show database
     *
     * @generated from protobuf rpc: ShowDatabase(db3_node_proto.ShowDatabaseRequest) returns (db3_node_proto.ShowDatabaseResponse);
     */
    showDatabase(input: ShowDatabaseRequest, options?: RpcOptions): UnaryCall<ShowDatabaseRequest, ShowDatabaseResponse>;
    /**
     * method for query document
     *
     * @generated from protobuf rpc: RunQuery(db3_node_proto.RunQueryRequest) returns (db3_node_proto.RunQueryResponse);
     */
    runQuery(input: RunQueryRequest, options?: RpcOptions): UnaryCall<RunQueryRequest, RunQueryResponse>;
    /**
     * method for get document
     *
     * @generated from protobuf rpc: GetDocument(db3_node_proto.GetDocumentRequest) returns (db3_node_proto.GetDocumentResponse);
     */
    getDocument(input: GetDocumentRequest, options?: RpcOptions): UnaryCall<GetDocumentRequest, GetDocumentResponse>;
    /**
     * method for show the network status
     *
     * @generated from protobuf rpc: ShowNetworkStatus(db3_node_proto.ShowNetworkStatusRequest) returns (db3_node_proto.NetworkStatus);
     */
    showNetworkStatus(input: ShowNetworkStatusRequest, options?: RpcOptions): UnaryCall<ShowNetworkStatusRequest, NetworkStatus>;
    /**
     * method for subscribution
     *
     * @generated from protobuf rpc: Subscribe(db3_node_proto.SubscribeRequest) returns (stream db3_event_proto.EventMessage);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, EventMessage>;
}
/**
 * @generated from protobuf service db3_node_proto.StorageNode
 */
export class StorageNodeClient implements IStorageNodeClient, ServiceInfo {
    typeName = StorageNode.typeName;
    methods = StorageNode.methods;
    options = StorageNode.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * method for querying bills by height
     *
     * @generated from protobuf rpc: QueryBill(db3_node_proto.QueryBillRequest) returns (db3_node_proto.QueryBillResponse);
     */
    queryBill(input: QueryBillRequest, options?: RpcOptions): UnaryCall<QueryBillRequest, QueryBillResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryBillRequest, QueryBillResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * method for open query session
     *
     * @generated from protobuf rpc: OpenQuerySession(db3_node_proto.OpenSessionRequest) returns (db3_node_proto.OpenSessionResponse);
     */
    openQuerySession(input: OpenSessionRequest, options?: RpcOptions): UnaryCall<OpenSessionRequest, OpenSessionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<OpenSessionRequest, OpenSessionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * method for close query session
     *
     * @generated from protobuf rpc: CloseQuerySession(db3_node_proto.CloseSessionRequest) returns (db3_node_proto.CloseSessionResponse);
     */
    closeQuerySession(input: CloseSessionRequest, options?: RpcOptions): UnaryCall<CloseSessionRequest, CloseSessionResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CloseSessionRequest, CloseSessionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * method for querying account
     *
     * @generated from protobuf rpc: GetAccount(db3_node_proto.GetAccountRequest) returns (db3_node_proto.GetAccountResponse);
     */
    getAccount(input: GetAccountRequest, options?: RpcOptions): UnaryCall<GetAccountRequest, GetAccountResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAccountRequest, GetAccountResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSessionInfo(db3_node_proto.GetSessionInfoRequest) returns (db3_node_proto.GetSessionInfoResponse);
     */
    getSessionInfo(input: GetSessionInfoRequest, options?: RpcOptions): UnaryCall<GetSessionInfoRequest, GetSessionInfoResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSessionInfoRequest, GetSessionInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * method for broadcast request
     *
     * @generated from protobuf rpc: Broadcast(db3_node_proto.BroadcastRequest) returns (db3_node_proto.BroadcastResponse);
     */
    broadcast(input: BroadcastRequest, options?: RpcOptions): UnaryCall<BroadcastRequest, BroadcastResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<BroadcastRequest, BroadcastResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * method for show database
     *
     * @generated from protobuf rpc: ShowDatabase(db3_node_proto.ShowDatabaseRequest) returns (db3_node_proto.ShowDatabaseResponse);
     */
    showDatabase(input: ShowDatabaseRequest, options?: RpcOptions): UnaryCall<ShowDatabaseRequest, ShowDatabaseResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ShowDatabaseRequest, ShowDatabaseResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * method for query document
     *
     * @generated from protobuf rpc: RunQuery(db3_node_proto.RunQueryRequest) returns (db3_node_proto.RunQueryResponse);
     */
    runQuery(input: RunQueryRequest, options?: RpcOptions): UnaryCall<RunQueryRequest, RunQueryResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<RunQueryRequest, RunQueryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * method for get document
     *
     * @generated from protobuf rpc: GetDocument(db3_node_proto.GetDocumentRequest) returns (db3_node_proto.GetDocumentResponse);
     */
    getDocument(input: GetDocumentRequest, options?: RpcOptions): UnaryCall<GetDocumentRequest, GetDocumentResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDocumentRequest, GetDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * method for show the network status
     *
     * @generated from protobuf rpc: ShowNetworkStatus(db3_node_proto.ShowNetworkStatusRequest) returns (db3_node_proto.NetworkStatus);
     */
    showNetworkStatus(input: ShowNetworkStatusRequest, options?: RpcOptions): UnaryCall<ShowNetworkStatusRequest, NetworkStatus> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ShowNetworkStatusRequest, NetworkStatus>("unary", this._transport, method, opt, input);
    }
    /**
     * method for subscribution
     *
     * @generated from protobuf rpc: Subscribe(db3_node_proto.SubscribeRequest) returns (stream db3_event_proto.EventMessage);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, EventMessage> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeRequest, EventMessage>("serverStreaming", this._transport, method, opt, input);
    }
}
