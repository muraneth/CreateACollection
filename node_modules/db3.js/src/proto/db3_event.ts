// @generated by protobuf-ts 2.8.2 with parameter optimize_code_size,long_type_string
// @generated from protobuf file "db3_event.proto" (package "db3_event_proto", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
/**
 * the node will dispatch a block event when a new block has been proposed
 *
 * @generated from protobuf message db3_event_proto.BlockEvent
 */
export interface BlockEvent {
    /**
     * @generated from protobuf field: uint64 height = 1;
     */
    height: string;
    /**
     * @generated from protobuf field: bytes block_hash = 2;
     */
    blockHash: Uint8Array;
    /**
     * @generated from protobuf field: bytes app_hash = 3;
     */
    appHash: Uint8Array;
    /**
     * @generated from protobuf field: string chain_id = 4;
     */
    chainId: string;
    /**
     * @generated from protobuf field: uint64 gas = 5;
     */
    gas: string;
}
/**
 * the node will dispatch a mutation event when a mutation has been checked
 *
 * @generated from protobuf message db3_event_proto.MutationEvent
 */
export interface MutationEvent {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: db3_event_proto.MutationEvent.MutationEventStatus status = 2;
     */
    status: MutationEvent_MutationEventStatus;
    /**
     * the address that mutation has been send to
     *
     * @generated from protobuf field: bytes to = 3;
     */
    to: Uint8Array;
    /**
     * @generated from protobuf field: uint64 gas = 4;
     */
    gas: string;
}
/**
 * @generated from protobuf enum db3_event_proto.MutationEvent.MutationEventStatus
 */
export enum MutationEvent_MutationEventStatus {
    /**
     * the mutation has been deliveried
     *
     * @generated from protobuf enum value: Deliveried = 0;
     */
    Deliveried = 0,
    /**
     * not enough gas
     *
     * @generated from protobuf enum value: OutOfGas = 1;
     */
    OutOfGas = 1,
    /**
     * invalid mutation
     *
     * @generated from protobuf enum value: Invalid = 2;
     */
    Invalid = 2
}
/**
 * @generated from protobuf enum db3_event_proto.MutationEvent.ToAddressType
 */
export enum MutationEvent_ToAddressType {
    /**
     * mutation for data
     *
     * @generated from protobuf enum value: Database = 0;
     */
    Database = 0,
    /**
     * mutation for credit
     *
     * @generated from protobuf enum value: Account = 1;
     */
    Account = 1
}
/**
 * @generated from protobuf message db3_event_proto.EventMessage
 */
export interface EventMessage {
    /**
     * @generated from protobuf field: db3_event_proto.EventType type = 1;
     */
    type: EventType;
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "mutationEvent";
        /**
         * @generated from protobuf field: db3_event_proto.MutationEvent mutation_event = 2;
         */
        mutationEvent: MutationEvent;
    } | {
        oneofKind: "blockEvent";
        /**
         * @generated from protobuf field: db3_event_proto.BlockEvent block_event = 3;
         */
        blockEvent: BlockEvent;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message db3_event_proto.MutationEventFilter
 */
export interface MutationEventFilter {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
}
/**
 * @generated from protobuf message db3_event_proto.BlockEventFilter
 */
export interface BlockEventFilter {
}
/**
 * @generated from protobuf message db3_event_proto.EventFilter
 */
export interface EventFilter {
    /**
     * @generated from protobuf oneof: filter
     */
    filter: {
        oneofKind: "mfilter";
        /**
         * @generated from protobuf field: db3_event_proto.MutationEventFilter mfilter = 1;
         */
        mfilter: MutationEventFilter;
    } | {
        oneofKind: "bfilter";
        /**
         * @generated from protobuf field: db3_event_proto.BlockEventFilter bfilter = 2;
         */
        bfilter: BlockEventFilter;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message db3_event_proto.Subscribution
 */
export interface Subscribution {
    /**
     * @generated from protobuf field: repeated db3_event_proto.EventType topics = 1;
     */
    topics: EventType[];
    /**
     * @generated from protobuf field: repeated db3_event_proto.EventFilter filters = 2;
     */
    filters: EventFilter[];
}
/**
 * @generated from protobuf enum db3_event_proto.EventType
 */
export enum EventType {
    /**
     * @generated from protobuf enum value: Block = 0;
     */
    Block = 0,
    /**
     * @generated from protobuf enum value: Mutation = 1;
     */
    Mutation = 1,
    /**
     * @generated from protobuf enum value: Query = 2;
     */
    Query = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class BlockEvent$Type extends MessageType<BlockEvent> {
    constructor() {
        super("db3_event_proto.BlockEvent", [
            { no: 1, name: "height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "block_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "app_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "chain_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "gas", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_event_proto.BlockEvent
 */
export const BlockEvent = new BlockEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MutationEvent$Type extends MessageType<MutationEvent> {
    constructor() {
        super("db3_event_proto.MutationEvent", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["db3_event_proto.MutationEvent.MutationEventStatus", MutationEvent_MutationEventStatus] },
            { no: 3, name: "to", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "gas", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_event_proto.MutationEvent
 */
export const MutationEvent = new MutationEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventMessage$Type extends MessageType<EventMessage> {
    constructor() {
        super("db3_event_proto.EventMessage", [
            { no: 1, name: "type", kind: "enum", T: () => ["db3_event_proto.EventType", EventType] },
            { no: 2, name: "mutation_event", kind: "message", oneof: "event", T: () => MutationEvent },
            { no: 3, name: "block_event", kind: "message", oneof: "event", T: () => BlockEvent }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_event_proto.EventMessage
 */
export const EventMessage = new EventMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MutationEventFilter$Type extends MessageType<MutationEventFilter> {
    constructor() {
        super("db3_event_proto.MutationEventFilter", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_event_proto.MutationEventFilter
 */
export const MutationEventFilter = new MutationEventFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockEventFilter$Type extends MessageType<BlockEventFilter> {
    constructor() {
        super("db3_event_proto.BlockEventFilter", []);
    }
}
/**
 * @generated MessageType for protobuf message db3_event_proto.BlockEventFilter
 */
export const BlockEventFilter = new BlockEventFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventFilter$Type extends MessageType<EventFilter> {
    constructor() {
        super("db3_event_proto.EventFilter", [
            { no: 1, name: "mfilter", kind: "message", oneof: "filter", T: () => MutationEventFilter },
            { no: 2, name: "bfilter", kind: "message", oneof: "filter", T: () => BlockEventFilter }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_event_proto.EventFilter
 */
export const EventFilter = new EventFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Subscribution$Type extends MessageType<Subscribution> {
    constructor() {
        super("db3_event_proto.Subscribution", [
            { no: 1, name: "topics", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["db3_event_proto.EventType", EventType] },
            { no: 2, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EventFilter }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message db3_event_proto.Subscribution
 */
export const Subscribution = new Subscribution$Type();
